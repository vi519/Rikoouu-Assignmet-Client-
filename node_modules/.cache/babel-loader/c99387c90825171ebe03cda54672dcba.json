{"ast":null,"code":"import * as types from \"./actionType\";\nimport axios from \"axios\";\n\nconst getUsers = users => ({\n  type: types.GET_USERS,\n  payload: users\n});\n\nconst userDeleted = () => ({\n  type: types.DELETE_USERS\n});\n\nconst EditUser = user => ({\n  type: types.GET_USER_BY_ID,\n  payload: user.data\n});\n\n_c = EditUser;\n\nconst updatedUser = () => ({\n  type: types.UPDATE_USER_BY_ID\n});\n\nexport const loadUser = () => {\n  return function (dispatch) {\n    axios.get(`https://reqres.in/api/users`).then(response => {\n      console.log(\"response from api\", response);\n      dispatch(getUsers(response.data));\n    }).catch(error => console.log(\"ERROR\" + error));\n  };\n};\nexport const deleteUsers = id => {\n  return function (dispatch) {\n    axios.delete(`https://reqres.in/api/users/${id}`).then(response => {\n      console.log(\"response from api\", response);\n      dispatch(userDeleted()); // dispatch(getUsers(response.data));\n    }).catch(error => console.log(\"ERROR\" + error));\n  };\n};\nexport const getUserById = id => {\n  return function (dispatch) {\n    axios.get(`https://reqres.in/api/users/${id}`).then(response => {\n      console.log(\"response from api\", response);\n      dispatch(EditUser(response.data)); // dispatch(getUsers(response.data));\n    }).catch(error => console.log(\"ERROR\" + error));\n  };\n};\nexport const UpdateById = (user, id) => {\n  return function (dispatch) {\n    axios.put(`https://reqres.in/api/users/${id}`, user).then(response => {\n      console.log(\"response from api\", response);\n      dispatch(updatedUser()); // dispatch(getUsers(response.data));\n    }).catch(error => console.log(\"ERROR\" + error));\n  };\n};\n_c2 = UpdateById;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"EditUser\");\n$RefreshReg$(_c2, \"UpdateById\");","map":{"version":3,"sources":["C:/Users/User/react-redux-assignment/rikooou-react-redux-assignment/src/redux/actions.js"],"names":["types","axios","getUsers","users","type","GET_USERS","payload","userDeleted","DELETE_USERS","EditUser","user","GET_USER_BY_ID","data","updatedUser","UPDATE_USER_BY_ID","loadUser","dispatch","get","then","response","console","log","catch","error","deleteUsers","id","delete","getUserById","UpdateById","put"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,cAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,QAAQ,GAAIC,KAAD,KAAY;AAC3BC,EAAAA,IAAI,EAAEJ,KAAK,CAACK,SADe;AAE3BC,EAAAA,OAAO,EAAEH;AAFkB,CAAZ,CAAjB;;AAKA,MAAMI,WAAW,GAAG,OAAO;AACzBH,EAAAA,IAAI,EAAEJ,KAAK,CAACQ;AADa,CAAP,CAApB;;AAGA,MAAMC,QAAQ,GAAIC,IAAD,KAAW;AAC1BN,EAAAA,IAAI,EAAEJ,KAAK,CAACW,cADc;AAE1BL,EAAAA,OAAO,EAAEI,IAAI,CAACE;AAFY,CAAX,CAAjB;;KAAMH,Q;;AAKN,MAAMI,WAAW,GAAG,OAAO;AACzBT,EAAAA,IAAI,EAAEJ,KAAK,CAACc;AADa,CAAP,CAApB;;AAGA,OAAO,MAAMC,QAAQ,GAAG,MAAM;AAC5B,SAAO,UAAUC,QAAV,EAAoB;AACzBf,IAAAA,KAAK,CACFgB,GADH,CACQ,6BADR,EAEGC,IAFH,CAESC,QAAD,IAAc;AAClBC,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCF,QAAjC;AACAH,MAAAA,QAAQ,CAACd,QAAQ,CAACiB,QAAQ,CAACP,IAAV,CAAT,CAAR;AACD,KALH,EAMGU,KANH,CAMUC,KAAD,IAAWH,OAAO,CAACC,GAAR,CAAY,UAAUE,KAAtB,CANpB;AAOD,GARD;AASD,CAVM;AAYP,OAAO,MAAMC,WAAW,GAAIC,EAAD,IAAQ;AACjC,SAAO,UAAUT,QAAV,EAAoB;AACzBf,IAAAA,KAAK,CACFyB,MADH,CACW,+BAA8BD,EAAG,EAD5C,EAEGP,IAFH,CAESC,QAAD,IAAc;AAClBC,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCF,QAAjC;AACAH,MAAAA,QAAQ,CAACT,WAAW,EAAZ,CAAR,CAFkB,CAGlB;AACD,KANH,EAOGe,KAPH,CAOUC,KAAD,IAAWH,OAAO,CAACC,GAAR,CAAY,UAAUE,KAAtB,CAPpB;AAQD,GATD;AAUD,CAXM;AAaP,OAAO,MAAMI,WAAW,GAAIF,EAAD,IAAQ;AACjC,SAAO,UAAUT,QAAV,EAAoB;AACzBf,IAAAA,KAAK,CACFgB,GADH,CACQ,+BAA8BQ,EAAG,EADzC,EAEGP,IAFH,CAESC,QAAD,IAAc;AAClBC,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCF,QAAjC;AACAH,MAAAA,QAAQ,CAACP,QAAQ,CAACU,QAAQ,CAACP,IAAV,CAAT,CAAR,CAFkB,CAGlB;AACD,KANH,EAOGU,KAPH,CAOUC,KAAD,IAAWH,OAAO,CAACC,GAAR,CAAY,UAAUE,KAAtB,CAPpB;AAQD,GATD;AAUD,CAXM;AAaP,OAAO,MAAMK,UAAU,GAAG,CAAClB,IAAD,EAAOe,EAAP,KAAc;AACtC,SAAO,UAAUT,QAAV,EAAoB;AACzBf,IAAAA,KAAK,CACF4B,GADH,CACQ,+BAA8BJ,EAAG,EADzC,EAC4Cf,IAD5C,EAEGQ,IAFH,CAESC,QAAD,IAAc;AAClBC,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCF,QAAjC;AACAH,MAAAA,QAAQ,CAACH,WAAW,EAAZ,CAAR,CAFkB,CAGlB;AACD,KANH,EAOGS,KAPH,CAOUC,KAAD,IAAWH,OAAO,CAACC,GAAR,CAAY,UAAUE,KAAtB,CAPpB;AAQD,GATD;AAUD,CAXM;MAAMK,U","sourcesContent":["import * as types from \"./actionType\";\r\nimport axios from \"axios\";\r\n\r\nconst getUsers = (users) => ({\r\n  type: types.GET_USERS,\r\n  payload: users,\r\n});\r\n\r\nconst userDeleted = () => ({\r\n  type: types.DELETE_USERS,\r\n});\r\nconst EditUser = (user) => ({\r\n  type: types.GET_USER_BY_ID,\r\n  payload: user.data,\r\n});\r\n\r\nconst updatedUser = () => ({\r\n  type: types.UPDATE_USER_BY_ID,\r\n});\r\nexport const loadUser = () => {\r\n  return function (dispatch) {\r\n    axios\r\n      .get(`https://reqres.in/api/users`)\r\n      .then((response) => {\r\n        console.log(\"response from api\", response);\r\n        dispatch(getUsers(response.data));\r\n      })\r\n      .catch((error) => console.log(\"ERROR\" + error));\r\n  };\r\n};\r\n\r\nexport const deleteUsers = (id) => {\r\n  return function (dispatch) {\r\n    axios\r\n      .delete(`https://reqres.in/api/users/${id}`)\r\n      .then((response) => {\r\n        console.log(\"response from api\", response);\r\n        dispatch(userDeleted());\r\n        // dispatch(getUsers(response.data));\r\n      })\r\n      .catch((error) => console.log(\"ERROR\" + error));\r\n  };\r\n};\r\n\r\nexport const getUserById = (id) => {\r\n  return function (dispatch) {\r\n    axios\r\n      .get(`https://reqres.in/api/users/${id}`)\r\n      .then((response) => {\r\n        console.log(\"response from api\", response);\r\n        dispatch(EditUser(response.data));\r\n        // dispatch(getUsers(response.data));\r\n      })\r\n      .catch((error) => console.log(\"ERROR\" + error));\r\n  };\r\n};\r\n\r\nexport const UpdateById = (user, id) => {\r\n  return function (dispatch) {\r\n    axios\r\n      .put(`https://reqres.in/api/users/${id}`, user)\r\n      .then((response) => {\r\n        console.log(\"response from api\", response);\r\n        dispatch(updatedUser());\r\n        // dispatch(getUsers(response.data));\r\n      })\r\n      .catch((error) => console.log(\"ERROR\" + error));\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}